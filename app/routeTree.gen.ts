/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PrivacyImport } from './routes/privacy'
import { Route as KontakImport } from './routes/kontak'
import { Route as EkipImport } from './routes/ekip'
import { Route as IndexImport } from './routes/index'
import { Route as PanelisIndexImport } from './routes/panelis/index'
import { Route as PanelisSpeakerIdImport } from './routes/panelis/$speakerId'
import { Route as EpizodEpisodeIdImport } from './routes/epizod/$episodeId'

// Create/Update Routes

const PrivacyRoute = PrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const KontakRoute = KontakImport.update({
  id: '/kontak',
  path: '/kontak',
  getParentRoute: () => rootRoute,
} as any)

const EkipRoute = EkipImport.update({
  id: '/ekip',
  path: '/ekip',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PanelisIndexRoute = PanelisIndexImport.update({
  id: '/panelis/',
  path: '/panelis/',
  getParentRoute: () => rootRoute,
} as any)

const PanelisSpeakerIdRoute = PanelisSpeakerIdImport.update({
  id: '/panelis/$speakerId',
  path: '/panelis/$speakerId',
  getParentRoute: () => rootRoute,
} as any)

const EpizodEpisodeIdRoute = EpizodEpisodeIdImport.update({
  id: '/epizod/$episodeId',
  path: '/epizod/$episodeId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/ekip': {
      id: '/ekip'
      path: '/ekip'
      fullPath: '/ekip'
      preLoaderRoute: typeof EkipImport
      parentRoute: typeof rootRoute
    }
    '/kontak': {
      id: '/kontak'
      path: '/kontak'
      fullPath: '/kontak'
      preLoaderRoute: typeof KontakImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyImport
      parentRoute: typeof rootRoute
    }
    '/epizod/$episodeId': {
      id: '/epizod/$episodeId'
      path: '/epizod/$episodeId'
      fullPath: '/epizod/$episodeId'
      preLoaderRoute: typeof EpizodEpisodeIdImport
      parentRoute: typeof rootRoute
    }
    '/panelis/$speakerId': {
      id: '/panelis/$speakerId'
      path: '/panelis/$speakerId'
      fullPath: '/panelis/$speakerId'
      preLoaderRoute: typeof PanelisSpeakerIdImport
      parentRoute: typeof rootRoute
    }
    '/panelis/': {
      id: '/panelis/'
      path: '/panelis'
      fullPath: '/panelis'
      preLoaderRoute: typeof PanelisIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/ekip': typeof EkipRoute
  '/kontak': typeof KontakRoute
  '/privacy': typeof PrivacyRoute
  '/epizod/$episodeId': typeof EpizodEpisodeIdRoute
  '/panelis/$speakerId': typeof PanelisSpeakerIdRoute
  '/panelis': typeof PanelisIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/ekip': typeof EkipRoute
  '/kontak': typeof KontakRoute
  '/privacy': typeof PrivacyRoute
  '/epizod/$episodeId': typeof EpizodEpisodeIdRoute
  '/panelis/$speakerId': typeof PanelisSpeakerIdRoute
  '/panelis': typeof PanelisIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/ekip': typeof EkipRoute
  '/kontak': typeof KontakRoute
  '/privacy': typeof PrivacyRoute
  '/epizod/$episodeId': typeof EpizodEpisodeIdRoute
  '/panelis/$speakerId': typeof PanelisSpeakerIdRoute
  '/panelis/': typeof PanelisIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/ekip'
    | '/kontak'
    | '/privacy'
    | '/epizod/$episodeId'
    | '/panelis/$speakerId'
    | '/panelis'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/ekip'
    | '/kontak'
    | '/privacy'
    | '/epizod/$episodeId'
    | '/panelis/$speakerId'
    | '/panelis'
  id:
    | '__root__'
    | '/'
    | '/ekip'
    | '/kontak'
    | '/privacy'
    | '/epizod/$episodeId'
    | '/panelis/$speakerId'
    | '/panelis/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EkipRoute: typeof EkipRoute
  KontakRoute: typeof KontakRoute
  PrivacyRoute: typeof PrivacyRoute
  EpizodEpisodeIdRoute: typeof EpizodEpisodeIdRoute
  PanelisSpeakerIdRoute: typeof PanelisSpeakerIdRoute
  PanelisIndexRoute: typeof PanelisIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EkipRoute: EkipRoute,
  KontakRoute: KontakRoute,
  PrivacyRoute: PrivacyRoute,
  EpizodEpisodeIdRoute: EpizodEpisodeIdRoute,
  PanelisSpeakerIdRoute: PanelisSpeakerIdRoute,
  PanelisIndexRoute: PanelisIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/ekip",
        "/kontak",
        "/privacy",
        "/epizod/$episodeId",
        "/panelis/$speakerId",
        "/panelis/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/ekip": {
      "filePath": "ekip.tsx"
    },
    "/kontak": {
      "filePath": "kontak.tsx"
    },
    "/privacy": {
      "filePath": "privacy.tsx"
    },
    "/epizod/$episodeId": {
      "filePath": "epizod/$episodeId.tsx"
    },
    "/panelis/$speakerId": {
      "filePath": "panelis/$speakerId.tsx"
    },
    "/panelis/": {
      "filePath": "panelis/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
